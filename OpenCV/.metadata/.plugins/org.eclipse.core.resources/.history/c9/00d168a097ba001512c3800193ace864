// OpenCV Diplay camera. http://talkera.org/opencv
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include "/usr/local/include/opencv/cv.h"
#include "/usr/local/include/opencv/highgui.h"

#include <iostream>
#include <stdio.h>
#include <sstream>
#include <string>
#include <cstdio>

using namespace std;
using namespace cv;

int main()
{

	VideoCapture capture(0); //-1, 0, 1 device id
	if(!capture.isOpened())
	{
		printf("error to initialize camera");
		return 1;
	}
	Mat cap_img,gray_img;
	vector<Rect> faces, eyes;
	while(1)
	{
		capture >> cap_img;

		  /// Reduce the noise so we avoid false circle detection
		  GaussianBlur( src_gray, src_gray, Size(9, 9), 2, 2 );

		  vector<Vec3f> circles;

		  /// Apply the Hough Transform to find the circles
		  HoughCircles( src_gray, circles, CV_HOUGH_GRADIENT, 1, src_gray.rows/8, 200, 100, 0, 0 );

		  /// Draw the circles detected
		  for( size_t i = 0; i < circles.size(); i++ )
		  {
		      Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
		      int radius = cvRound(circles[i][2]);
		      // circle center
		      circle( src, center, 3, Scalar(0,255,0), -1, 8, 0 );
		      // circle outline
		      circle( src, center, radius, Scalar(0,0,255), 3, 8, 0 );
		   }

		  /// Show your results
		  namedWindow( "Hough Circle Transform Demo", CV_WINDOW_AUTOSIZE );
		  imshow( "Hough Circle Transform Demo", src );
	}
	return 0;
}
